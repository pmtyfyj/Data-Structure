一、数据结构分类
  线性结构:数组、栈、队列、链表、哈希表...
  树结构:二叉树、二分搜索树、AVL、Trie(前缀树)、线段树、K-D树、并查集、哈夫曼树...
  图结构：邻接矩阵、邻接表
  寻路算法：本质是经典的图论算法，基本思路：
    DFS：(深度优先遍历)使用栈
    BFS：(广度优先遍历)使用队列
 数据结构+算法=程序
 LeetCode

 二、数据结构

 数组：
 最大优点快速查询，数组做好应用于索引有语义的情况，但并非所有有语义的索引都适用于数组。

 泛型：
 让我们的数据结构可以放置任何数据类型
 不可以是基本数据类型，只能是类对象
 每个基本数据类型都有对应的包装类

 时间复杂度分析：
 O(1),O(n),O(lgn),O(nlgn),O(n^2)
 大O描述的是算法的运行时间和输入数据之间的关系

 栈 Stack：
 栈是一种线性结构
 相比数组，栈对应的操作是数组的子集
 只能从一端添加元素，也只能从一端去除元素
 这一端称为栈顶
 栈是一种后进先出的数据结构(Last In First Out(LIFO))
 栈的应用：
   撤销操作
   程序调用的系统栈
   括号匹配-编译器

 队列 Queue：
 队列也是一种线性结构
 相比数组，队列对应的操作是数组的子集
 只能从一端(队尾)添加元素，只能从另一端(队首)取出元素
 队列是一种先进先出的数据结构(First In First Out(FIFO))
 数组队列
 循环队列
 应用于广度优先遍历

 链表：Linked List
 真正的动态数据结构，不需要处理固定容量的问题。但丧失了随机访问的能力
 不能像数组一样，给一个索引直接从这个数组拿出索引对应的数据，数组所开辟的空间在内存里是连续的。链表是通过next找下一个节点的。在内存里不一定是连续的。
 最简单的动态数据结构
 数据存储在节点中(Node)
 最后节点的next是NULL
 数组和链表对比：
   数组最好用于索引有语义的情况。
   最大的优点支持快速查询
   链表不适合用于索引有语义的情况
   最大优点：动态
 链表实现中常用的虚拟头节点
 对链表头进行增、删和查时间复杂度是O(1)
 链表队列：
   从head或是tail端添加元素都是很容易的
   从tail端删除元素不容易
   从head端删除元素，从tail端插入元素
   不牵扯到对链表中间的元素进行操作，不需要设置虚拟头节点，要注意链表为空的情况

 递归：
   将原来的问题转化为更小的同一问题
   递归调用是有代价的：函数调用+系统栈空间
   近乎和链表相关的所有操作，都可以使用递归的形式完成

 树结构：
   数据使用树结构存储，出奇的高效
 二分搜索树(Binary Search Tree)：
   二叉树：
     和链表一样，动态数据结构
     对每个节点来说，最多只能分成两个节点(左孩子、右孩子)
     具有唯一根节点
     一个节点没有任何子节点的叫做叶子节点
     每个节点最多有一个父节点
     具有天然递归结构
     每个节点的左右字数都是二叉树
     二叉树不一定是满的，就是说对于每一个节点来说不一定都有左右两个孩子
     一个节点也是二叉树，只不过左右两个孩子都是空
   二分搜索树是二叉树
   二分搜索树每个节点的值都要大于其左子树的所有节点的值
   二分搜索树每个节点的值都要小于其右子树的所有节点的值
   每一个子树都是二分搜索树
   存储的元素具有可比较性
   想要包含重复元素，只要定义左子树小于等于节点，或者右子树大于等于节点


