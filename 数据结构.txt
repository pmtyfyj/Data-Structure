一、数据结构分类
  线性结构:数组、栈、队列、链表、哈希表...
  树结构:二叉树、二分搜索树、AVL、Trie(前缀树)、线段树、K-D树、并查集、哈夫曼树...
  图结构：邻接矩阵、邻接表
  寻路算法：本质是经典的图论算法，基本思路：
    DFS：(深度优先遍历)使用栈
    BFS：(广度优先遍历)使用队列
 数据结构+算法=程序
 LeetCode

 二、数据结构

 数组：
 最大优点快速查询，数组做好应用于索引有语义的情况，但并非所有有语义的索引都适用于数组。

 泛型：
 让我们的数据结构可以放置任何数据类型
 不可以是基本数据类型，只能是类对象
 每个基本数据类型都有对应的包装类

 时间复杂度分析：
 O(1),O(n),O(lgn),O(nlgn),O(n^2)
 大O描述的是算法的运行时间和输入数据之间的关系

 栈 Stack：
 栈是一种线性结构
 相比数组，栈对应的操作是数组的子集
 只能从一端添加元素，也只能从一端去除元素
 这一端称为栈顶
 栈是一种后进先出的数据结构(Last In First Out(LIFO))
 栈的应用：
   撤销操作
   程序调用的系统栈
   括号匹配-编译器

 队列 Queue：
 队列也是一种线性结构
 相比数组，队列对应的操作是数组的子集
 只能从一端(队尾)添加元素，只能从另一端(队首)取出元素
 队列是一种先进先出的数据结构(First In First Out(FIFO))
 数组队列
 循环队列
 应用于广度优先遍历

 链表：Linked List
 真正的动态数据结构，不需要处理固定容量的问题。但丧失了随机访问的能力
 不能像数组一样，给一个索引直接从这个数组拿出索引对应的数据，数组所开辟的空间在内存里是连续的。链表是通过next找下一个节点的。在内存里不一定是连续的。
 最简单的动态数据结构
 数据存储在节点中(Node)
 最后节点的next是NULL
 数组和链表对比：
   数组最好用于索引有语义的情况。
   最大的优点支持快速查询
   链表不适合用于索引有语义的情况
   最大优点：动态

